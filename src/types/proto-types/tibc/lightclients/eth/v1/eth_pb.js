// source: tibc/lightclients/eth/v1/eth.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var tibc_core_client_v1_client_pb = require('../../../../tibc/core/client/v1/client_pb.js');
goog.object.extend(proto, tibc_core_client_v1_client_pb);
goog.exportSymbol('proto.tibc.lightclients.eth.v1.ClientState', null, global);
goog.exportSymbol('proto.tibc.lightclients.eth.v1.ConsensusState', null, global);
goog.exportSymbol('proto.tibc.lightclients.eth.v1.Header', null, global);
goog.exportSymbol('proto.tibc.lightclients.eth.v1.Proof', null, global);
goog.exportSymbol('proto.tibc.lightclients.eth.v1.StorageResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.lightclients.eth.v1.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.lightclients.eth.v1.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.lightclients.eth.v1.Header.displayName = 'proto.tibc.lightclients.eth.v1.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.lightclients.eth.v1.ClientState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.lightclients.eth.v1.ClientState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.lightclients.eth.v1.ClientState.displayName = 'proto.tibc.lightclients.eth.v1.ClientState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.lightclients.eth.v1.ConsensusState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.lightclients.eth.v1.ConsensusState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.lightclients.eth.v1.ConsensusState.displayName = 'proto.tibc.lightclients.eth.v1.ConsensusState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.lightclients.eth.v1.StorageResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tibc.lightclients.eth.v1.StorageResult.repeatedFields_, null);
};
goog.inherits(proto.tibc.lightclients.eth.v1.StorageResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.lightclients.eth.v1.StorageResult.displayName = 'proto.tibc.lightclients.eth.v1.StorageResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.lightclients.eth.v1.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tibc.lightclients.eth.v1.Proof.repeatedFields_, null);
};
goog.inherits(proto.tibc.lightclients.eth.v1.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.lightclients.eth.v1.Proof.displayName = 'proto.tibc.lightclients.eth.v1.Proof';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.lightclients.eth.v1.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.lightclients.eth.v1.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentHash: msg.getParentHash_asB64(),
    uncleHash: msg.getUncleHash_asB64(),
    coinbase: msg.getCoinbase_asB64(),
    root: msg.getRoot_asB64(),
    txHash: msg.getTxHash_asB64(),
    receiptHash: msg.getReceiptHash_asB64(),
    bloom: msg.getBloom_asB64(),
    difficulty: jspb.Message.getFieldWithDefault(msg, 8, 0),
    height: (f = msg.getHeight()) && tibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 10, 0),
    gasUsed: jspb.Message.getFieldWithDefault(msg, 11, 0),
    time: jspb.Message.getFieldWithDefault(msg, 12, 0),
    extra: msg.getExtra_asB64(),
    mixDigest: msg.getMixDigest_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 15, 0),
    basefee: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.lightclients.eth.v1.Header}
 */
proto.tibc.lightclients.eth.v1.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.lightclients.eth.v1.Header;
  return proto.tibc.lightclients.eth.v1.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.lightclients.eth.v1.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.lightclients.eth.v1.Header}
 */
proto.tibc.lightclients.eth.v1.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParentHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUncleHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCoinbase(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBloom(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDifficulty(value);
      break;
    case 9:
      var value = new tibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,tibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasUsed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtra(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMixDigest(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBasefee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.lightclients.eth.v1.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.lightclients.eth.v1.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUncleHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCoinbase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getReceiptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBloom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getDifficulty();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      tibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getGasUsed();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getExtra_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getMixDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = message.getBasefee();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
};


/**
 * optional bytes parent_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getParentHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes parent_hash = 1;
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getParentHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParentHash()));
};


/**
 * optional bytes parent_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentHash()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getParentHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParentHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setParentHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes uncle_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getUncleHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes uncle_hash = 2;
 * This is a type-conversion wrapper around `getUncleHash()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getUncleHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUncleHash()));
};


/**
 * optional bytes uncle_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUncleHash()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getUncleHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUncleHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setUncleHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes coinbase = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getCoinbase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes coinbase = 3;
 * This is a type-conversion wrapper around `getCoinbase()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getCoinbase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCoinbase()));
};


/**
 * optional bytes coinbase = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCoinbase()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getCoinbase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCoinbase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setCoinbase = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes root = 4;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes root = 4;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes tx_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes tx_hash = 5;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes receipt_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getReceiptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes receipt_hash = 6;
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getReceiptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptHash()));
};


/**
 * optional bytes receipt_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptHash()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getReceiptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setReceiptHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes bloom = 7;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getBloom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bloom = 7;
 * This is a type-conversion wrapper around `getBloom()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getBloom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBloom()));
};


/**
 * optional bytes bloom = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBloom()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getBloom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBloom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setBloom = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional uint64 difficulty = 8;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getDifficulty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setDifficulty = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional tibc.core.client.v1.Height height = 9;
 * @return {?proto.tibc.core.client.v1.Height}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getHeight = function() {
  return /** @type{?proto.tibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, tibc_core_client_v1_client_pb.Height, 9));
};


/**
 * @param {?proto.tibc.core.client.v1.Height|undefined} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
*/
proto.tibc.lightclients.eth.v1.Header.prototype.setHeight = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.clearHeight = function() {
  return this.setHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint64 gas_limit = 10;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 gas_used = 11;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getGasUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setGasUsed = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 time = 12;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes extra = 13;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getExtra = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes extra = 13;
 * This is a type-conversion wrapper around `getExtra()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getExtra_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtra()));
};


/**
 * optional bytes extra = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtra()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getExtra_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtra()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setExtra = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes mix_digest = 14;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getMixDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes mix_digest = 14;
 * This is a type-conversion wrapper around `getMixDigest()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getMixDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMixDigest()));
};


/**
 * optional bytes mix_digest = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMixDigest()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getMixDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMixDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setMixDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional uint64 nonce = 15;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 baseFee = 16;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.Header.prototype.getBasefee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.Header} returns this
 */
proto.tibc.lightclients.eth.v1.Header.prototype.setBasefee = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.lightclients.eth.v1.ClientState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.lightclients.eth.v1.ClientState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.ClientState.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.tibc.lightclients.eth.v1.Header.toObject(includeInstance, f),
    chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractAddress: msg.getContractAddress_asB64(),
    trustingPeriod: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timedelay: jspb.Message.getFieldWithDefault(msg, 5, 0),
    blockdelay: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.lightclients.eth.v1.ClientState}
 */
proto.tibc.lightclients.eth.v1.ClientState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.lightclients.eth.v1.ClientState;
  return proto.tibc.lightclients.eth.v1.ClientState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.lightclients.eth.v1.ClientState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.lightclients.eth.v1.ClientState}
 */
proto.tibc.lightclients.eth.v1.ClientState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tibc.lightclients.eth.v1.Header;
      reader.readMessage(value,proto.tibc.lightclients.eth.v1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTrustingPeriod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimedelay(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockdelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.lightclients.eth.v1.ClientState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.lightclients.eth.v1.ClientState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.ClientState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tibc.lightclients.eth.v1.Header.serializeBinaryToWriter
    );
  }
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTrustingPeriod();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTimedelay();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBlockdelay();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional Header header = 1;
 * @return {?proto.tibc.lightclients.eth.v1.Header}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getHeader = function() {
  return /** @type{?proto.tibc.lightclients.eth.v1.Header} */ (
    jspb.Message.getWrapperField(this, proto.tibc.lightclients.eth.v1.Header, 1));
};


/**
 * @param {?proto.tibc.lightclients.eth.v1.Header|undefined} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
*/
proto.tibc.lightclients.eth.v1.ClientState.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 chain_id = 2;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.setChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes contract_address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getContractAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes contract_address = 3;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getContractAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractAddress()));
};


/**
 * optional bytes contract_address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getContractAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.setContractAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 trusting_period = 4;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getTrustingPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.setTrustingPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 timeDelay = 5;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getTimedelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.setTimedelay = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 blockDelay = 6;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.getBlockdelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.ClientState} returns this
 */
proto.tibc.lightclients.eth.v1.ClientState.prototype.setBlockdelay = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.lightclients.eth.v1.ConsensusState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.lightclients.eth.v1.ConsensusState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.ConsensusState.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: (f = msg.getNumber()) && tibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    root: msg.getRoot_asB64(),
    header: (f = msg.getHeader()) && proto.tibc.lightclients.eth.v1.Header.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.lightclients.eth.v1.ConsensusState;
  return proto.tibc.lightclients.eth.v1.ConsensusState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.lightclients.eth.v1.ConsensusState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new tibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,tibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 4:
      var value = new proto.tibc.lightclients.eth.v1.Header;
      reader.readMessage(value,proto.tibc.lightclients.eth.v1.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.lightclients.eth.v1.ConsensusState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.lightclients.eth.v1.ConsensusState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.ConsensusState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      tibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.tibc.lightclients.eth.v1.Header.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional tibc.core.client.v1.Height number = 2;
 * @return {?proto.tibc.core.client.v1.Height}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getNumber = function() {
  return /** @type{?proto.tibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, tibc_core_client_v1_client_pb.Height, 2));
};


/**
 * @param {?proto.tibc.core.client.v1.Height|undefined} value
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
*/
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.setNumber = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.clearNumber = function() {
  return this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes root = 3;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional Header header = 4;
 * @return {?proto.tibc.lightclients.eth.v1.Header}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.getHeader = function() {
  return /** @type{?proto.tibc.lightclients.eth.v1.Header} */ (
    jspb.Message.getWrapperField(this, proto.tibc.lightclients.eth.v1.Header, 4));
};


/**
 * @param {?proto.tibc.lightclients.eth.v1.Header|undefined} value
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
*/
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.lightclients.eth.v1.ConsensusState} returns this
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.lightclients.eth.v1.ConsensusState.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tibc.lightclients.eth.v1.StorageResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.lightclients.eth.v1.StorageResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.lightclients.eth.v1.StorageResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.StorageResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proofList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult}
 */
proto.tibc.lightclients.eth.v1.StorageResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.lightclients.eth.v1.StorageResult;
  return proto.tibc.lightclients.eth.v1.StorageResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.lightclients.eth.v1.StorageResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult}
 */
proto.tibc.lightclients.eth.v1.StorageResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.lightclients.eth.v1.StorageResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.lightclients.eth.v1.StorageResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.StorageResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProofList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult} returns this
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult} returns this
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string proof = 3;
 * @return {!Array<string>}
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.getProofList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult} returns this
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.setProofList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult} returns this
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.addProof = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult} returns this
 */
proto.tibc.lightclients.eth.v1.StorageResult.prototype.clearProofList = function() {
  return this.setProofList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tibc.lightclients.eth.v1.Proof.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.lightclients.eth.v1.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.lightclients.eth.v1.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    codeHash: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, ""),
    storageHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    accountProofList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    storageProofList: jspb.Message.toObjectList(msg.getStorageProofList(),
    proto.tibc.lightclients.eth.v1.StorageResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.lightclients.eth.v1.Proof}
 */
proto.tibc.lightclients.eth.v1.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.lightclients.eth.v1.Proof;
  return proto.tibc.lightclients.eth.v1.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.lightclients.eth.v1.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.lightclients.eth.v1.Proof}
 */
proto.tibc.lightclients.eth.v1.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountProof(value);
      break;
    case 7:
      var value = new proto.tibc.lightclients.eth.v1.StorageResult;
      reader.readMessage(value,proto.tibc.lightclients.eth.v1.StorageResult.deserializeBinaryFromReader);
      msg.addStorageProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.lightclients.eth.v1.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.lightclients.eth.v1.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.lightclients.eth.v1.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCodeHash();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStorageHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAccountProofList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getStorageProofList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tibc.lightclients.eth.v1.StorageResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string balance = 2;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string code_hash = 3;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getCodeHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setCodeHash = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nonce = 4;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string storage_hash = 5;
 * @return {string}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getStorageHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setStorageHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string account_proof = 6;
 * @return {!Array<string>}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getAccountProofList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.setAccountProofList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.addAccountProof = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.clearAccountProofList = function() {
  return this.setAccountProofList([]);
};


/**
 * repeated StorageResult storage_proof = 7;
 * @return {!Array<!proto.tibc.lightclients.eth.v1.StorageResult>}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.getStorageProofList = function() {
  return /** @type{!Array<!proto.tibc.lightclients.eth.v1.StorageResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tibc.lightclients.eth.v1.StorageResult, 7));
};


/**
 * @param {!Array<!proto.tibc.lightclients.eth.v1.StorageResult>} value
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
*/
proto.tibc.lightclients.eth.v1.Proof.prototype.setStorageProofList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tibc.lightclients.eth.v1.StorageResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tibc.lightclients.eth.v1.StorageResult}
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.addStorageProof = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tibc.lightclients.eth.v1.StorageResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tibc.lightclients.eth.v1.Proof} returns this
 */
proto.tibc.lightclients.eth.v1.Proof.prototype.clearStorageProofList = function() {
  return this.setStorageProofList([]);
};


goog.object.extend(exports, proto.tibc.lightclients.eth.v1);
