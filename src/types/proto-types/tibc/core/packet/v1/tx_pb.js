// source: tibc/core/packet/v1/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var tibc_core_client_v1_client_pb = require('../../../../tibc/core/client/v1/client_pb.js');
goog.object.extend(proto, tibc_core_client_v1_client_pb);
var tibc_core_packet_v1_packet_pb = require('../../../../tibc/core/packet/v1/packet_pb.js');
goog.object.extend(proto, tibc_core_packet_v1_packet_pb);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgAcknowledgement', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgAcknowledgementResponse', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgCleanPacket', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgCleanPacketResponse', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgRecvCleanPacket', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgRecvPacket', null, global);
goog.exportSymbol('proto.tibc.core.packet.v1.MsgRecvPacketResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgRecvPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgRecvPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgRecvPacket.displayName = 'proto.tibc.core.packet.v1.MsgRecvPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgRecvPacketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgRecvPacketResponse.displayName = 'proto.tibc.core.packet.v1.MsgRecvPacketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgAcknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgAcknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgAcknowledgement.displayName = 'proto.tibc.core.packet.v1.MsgAcknowledgement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgAcknowledgementResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgAcknowledgementResponse.displayName = 'proto.tibc.core.packet.v1.MsgAcknowledgementResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgCleanPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgCleanPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgCleanPacket.displayName = 'proto.tibc.core.packet.v1.MsgCleanPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgCleanPacketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgCleanPacketResponse.displayName = 'proto.tibc.core.packet.v1.MsgCleanPacketResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgRecvCleanPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgRecvCleanPacket.displayName = 'proto.tibc.core.packet.v1.MsgRecvCleanPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.displayName = 'proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgRecvPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && tibc_core_packet_v1_packet_pb.Packet.toObject(includeInstance, f),
    proofCommitment: msg.getProofCommitment_asB64(),
    proofHeight: (f = msg.getProofHeight()) && tibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgRecvPacket;
  return proto.tibc.core.packet.v1.MsgRecvPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tibc_core_packet_v1_packet_pb.Packet;
      reader.readMessage(value,tibc_core_packet_v1_packet_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofCommitment(value);
      break;
    case 3:
      var value = new tibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,tibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgRecvPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tibc_core_packet_v1_packet_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getProofCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.tibc.core.packet.v1.Packet}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getPacket = function() {
  return /** @type{?proto.tibc.core.packet.v1.Packet} */ (
    jspb.Message.getWrapperField(this, tibc_core_packet_v1_packet_pb.Packet, 1));
};


/**
 * @param {?proto.tibc.core.packet.v1.Packet|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
*/
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof_commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getProofCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_commitment = 2;
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getProofCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofCommitment()));
};


/**
 * optional bytes proof_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getProofCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.setProofCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional tibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.tibc.core.client.v1.Height}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getProofHeight = function() {
  return /** @type{?proto.tibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, tibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.tibc.core.client.v1.Height|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
*/
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvPacket.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgRecvPacketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacketResponse}
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgRecvPacketResponse;
  return proto.tibc.core.packet.v1.MsgRecvPacketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgRecvPacketResponse}
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgRecvPacketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgRecvPacketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvPacketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgAcknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    packet: (f = msg.getPacket()) && tibc_core_packet_v1_packet_pb.Packet.toObject(includeInstance, f),
    acknowledgement: msg.getAcknowledgement_asB64(),
    proofAcked: msg.getProofAcked_asB64(),
    proofHeight: (f = msg.getProofHeight()) && tibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgAcknowledgement;
  return proto.tibc.core.packet.v1.MsgAcknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tibc_core_packet_v1_packet_pb.Packet;
      reader.readMessage(value,tibc_core_packet_v1_packet_pb.Packet.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAcknowledgement(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAcked(value);
      break;
    case 4:
      var value = new tibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,tibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgAcknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tibc_core_packet_v1_packet_pb.Packet.serializeBinaryToWriter
    );
  }
  f = message.getAcknowledgement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofAcked_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      tibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional Packet packet = 1;
 * @return {?proto.tibc.core.packet.v1.Packet}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getPacket = function() {
  return /** @type{?proto.tibc.core.packet.v1.Packet} */ (
    jspb.Message.getWrapperField(this, tibc_core_packet_v1_packet_pb.Packet, 1));
};


/**
 * @param {?proto.tibc.core.packet.v1.Packet|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
*/
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.setPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.clearPacket = function() {
  return this.setPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes acknowledgement = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getAcknowledgement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes acknowledgement = 2;
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getAcknowledgement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAcknowledgement()));
};


/**
 * optional bytes acknowledgement = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAcknowledgement()`
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getAcknowledgement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAcknowledgement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.setAcknowledgement = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes proof_acked = 3;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getProofAcked = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes proof_acked = 3;
 * This is a type-conversion wrapper around `getProofAcked()`
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getProofAcked_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAcked()));
};


/**
 * optional bytes proof_acked = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAcked()`
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getProofAcked_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAcked()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.setProofAcked = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional tibc.core.client.v1.Height proof_height = 4;
 * @return {?proto.tibc.core.client.v1.Height}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getProofHeight = function() {
  return /** @type{?proto.tibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, tibc_core_client_v1_client_pb.Height, 4));
};


/**
 * @param {?proto.tibc.core.client.v1.Height|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
*/
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signer = 5;
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgement} returns this
 */
proto.tibc.core.packet.v1.MsgAcknowledgement.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgAcknowledgementResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgementResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgementResponse}
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgAcknowledgementResponse;
  return proto.tibc.core.packet.v1.MsgAcknowledgementResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgementResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgAcknowledgementResponse}
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgAcknowledgementResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgAcknowledgementResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgAcknowledgementResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgCleanPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgCleanPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    cleanPacket: (f = msg.getCleanPacket()) && tibc_core_packet_v1_packet_pb.CleanPacket.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacket}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgCleanPacket;
  return proto.tibc.core.packet.v1.MsgCleanPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacket}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tibc_core_packet_v1_packet_pb.CleanPacket;
      reader.readMessage(value,tibc_core_packet_v1_packet_pb.CleanPacket.deserializeBinaryFromReader);
      msg.setCleanPacket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgCleanPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgCleanPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCleanPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tibc_core_packet_v1_packet_pb.CleanPacket.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional CleanPacket clean_packet = 1;
 * @return {?proto.tibc.core.packet.v1.CleanPacket}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.getCleanPacket = function() {
  return /** @type{?proto.tibc.core.packet.v1.CleanPacket} */ (
    jspb.Message.getWrapperField(this, tibc_core_packet_v1_packet_pb.CleanPacket, 1));
};


/**
 * @param {?proto.tibc.core.packet.v1.CleanPacket|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacket} returns this
*/
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.setCleanPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.clearCleanPacket = function() {
  return this.setCleanPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.hasCleanPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string signer = 2;
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgCleanPacket.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgCleanPacketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacketResponse}
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgCleanPacketResponse;
  return proto.tibc.core.packet.v1.MsgCleanPacketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgCleanPacketResponse}
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgCleanPacketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgCleanPacketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgCleanPacketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgRecvCleanPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    cleanPacket: (f = msg.getCleanPacket()) && tibc_core_packet_v1_packet_pb.CleanPacket.toObject(includeInstance, f),
    proofCommitment: msg.getProofCommitment_asB64(),
    proofHeight: (f = msg.getProofHeight()) && tibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
    signer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgRecvCleanPacket;
  return proto.tibc.core.packet.v1.MsgRecvCleanPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tibc_core_packet_v1_packet_pb.CleanPacket;
      reader.readMessage(value,tibc_core_packet_v1_packet_pb.CleanPacket.deserializeBinaryFromReader);
      msg.setCleanPacket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofCommitment(value);
      break;
    case 3:
      var value = new tibc_core_client_v1_client_pb.Height;
      reader.readMessage(value,tibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgRecvCleanPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCleanPacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      tibc_core_packet_v1_packet_pb.CleanPacket.serializeBinaryToWriter
    );
  }
  f = message.getProofCommitment_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      tibc_core_client_v1_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CleanPacket clean_packet = 1;
 * @return {?proto.tibc.core.packet.v1.CleanPacket}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getCleanPacket = function() {
  return /** @type{?proto.tibc.core.packet.v1.CleanPacket} */ (
    jspb.Message.getWrapperField(this, tibc_core_packet_v1_packet_pb.CleanPacket, 1));
};


/**
 * @param {?proto.tibc.core.packet.v1.CleanPacket|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
*/
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.setCleanPacket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.clearCleanPacket = function() {
  return this.setCleanPacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.hasCleanPacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes proof_commitment = 2;
 * @return {!(string|Uint8Array)}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getProofCommitment = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_commitment = 2;
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getProofCommitment_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofCommitment()));
};


/**
 * optional bytes proof_commitment = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofCommitment()`
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getProofCommitment_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofCommitment()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.setProofCommitment = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional tibc.core.client.v1.Height proof_height = 3;
 * @return {?proto.tibc.core.client.v1.Height}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getProofHeight = function() {
  return /** @type{?proto.tibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, tibc_core_client_v1_client_pb.Height, 3));
};


/**
 * @param {?proto.tibc.core.client.v1.Height|undefined} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
*/
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacket} returns this
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacket.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse;
  return proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tibc.core.packet.v1.MsgRecvCleanPacketResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.tibc.core.packet.v1);
